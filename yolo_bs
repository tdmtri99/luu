import cv2 as cv
import numpy as np
import datetime
import threading

cap = cv.VideoCapture('video/test1.mp4')
whT = 320
confThreshold = 0.5
nmsThreshold = 0.2
#### LOAD MODEL
## Coco Names
classesFile = "coco.names"
classNames = []
with open(classesFile, 'rt') as f:
    classNames = f.read().rstrip('\n').split('\n')
print(classNames)
## Model Files
modelConfiguration = "tri.cfg"
modelWeights = "last.weights"
net = cv.dnn.readNetFromDarknet(modelConfiguration, modelWeights)
net.setPreferableBackend(cv.dnn.DNN_BACKEND_OPENCV)
net.setPreferableTarget(cv.dnn.DNN_TARGET_CPU)
#### DONE LOAD MODEL

fgbg = cv.createBackgroundSubtractorMOG2(500, 500, True)

haveMove = False
havePerson = False


def findPerson(outputs, img):
    global havePerson
    hT, wT, cT = img.shape
    bbox = []
    classIds = []
    confs = []
    for output in outputs:
        for det in output:
            scores = det[5:]
            classId = np.argmax(scores)
            confidence = scores[classId]
            if confidence > confThreshold:
                w, h = int(det[2] * wT), int(det[3] * hT)
                x, y = int((det[0] * wT) - w / 2), int((det[1] * hT) - h / 2)
                bbox.append([x, y, w, h])
                classIds.append(classId)
                confs.append(float(confidence))
                havePerson = True

    indices = cv.dnn.NMSBoxes(bbox, confs, confThreshold, nmsThreshold)

    for i in indices:
        i = i[0]
        box = bbox[i]
        x, y, w, h = box[0], box[1], box[2], box[3]
        print(x, y, w, h)
        cv.rectangle(img, (x, y), (x + w, y + h), (255, 0, 255), 2)
        cv.putText(img, f'{classNames[classIds[i]].upper()} {int(confs[i] * 100)}%', (x, y - 10),
                   cv.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 255), 2)
        print(classNames[classIds[i]].upper())


def objDection():
    global haveMove, havePerson
    now_plus_15s = datetime.datetime.now() + datetime.timedelta(seconds=15)
    while datetime.datetime.now() < now_plus_15s or havePerson == True:
        success, img = cap.read()
        show = img
        if havePerson == False:
            blob = cv.dnn.blobFromImage(img, 1 / 255, (whT, whT), [0, 0, 0], 1, crop=False)
            net.setInput(blob)
            layersNames = net.getLayerNames()
            outputNames = [(layersNames[i[0] - 1]) for i in net.getUnconnectedOutLayers()]
            outputs = net.forward(outputNames)

            findPerson(outputs, img)
            cv.imshow('Image', img)
            cv.putText(show, 'Something Movent', (10, 50), cv.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv.LINE_AA)
        else:
            cv.putText(show, 'Have person in home', (10, 50), cv.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv.LINE_AA)
        cv.imshow('Show', show)
        cv.waitKey(1)

    if havePerson == False:
        haveMove = False
        background_subtraction()


def background_subtraction():
    global haveMove
    firsttime = True
    while True:
        ret, frame = cap.read()
        if not ret:
            continue

        resizedFrame = cv.resize(frame, (0, 0), fx=0.5, fy=0.5)
        fgmask = fgbg.apply(resizedFrame)
        count = np.count_nonzero(fgmask)
        if count > 300 and firsttime == False:
            haveMove = True
            objDection()
            break

        cv.imshow('Frame', resizedFrame)
        cv.imshow('Mask', fgmask)
        cv.waitKey(1)
        firsttime = False
    cv.destroyAllWindows()


threading.Thread(target=background_subtraction).start()


